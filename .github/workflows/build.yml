on:
  push:
    branches:
      - master
      
name: build-and-release
jobs:
  release:
    if: github.event.sender.type != 'Bot'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get previous version
        id: get_version
        run: echo "::set-output name=prev_version::$(cat version.txt)"

      - name: Determine new version
        id: determine_version
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          prev_version=$PREV_VERSION
          major=${prev_version%%.*}
          minor=${prev_version%.*}
          minor=${minor#*.}
          patch=${prev_version##*.}

          if [[ $commit_msg == *"fix!"* || $commit_msg == *"feat!"* ]]; then
            new_version="$((major+1)).0.0"
          elif [[ $commit_msg == *"fix:"* ]]; then
            new_version="$major.$minor.$((patch+1))"
          elif [[ $commit_msg == *"feat:"* ]]; then
            new_version="$major.$((minor+1)).0"
          else
            new_version=$prev_version
          fi

          echo "::set-output name=new_version::$new_version"

      - name: Update version file
        run: echo "${{ steps.determine_version.outputs.new_version }}" > version.txt

      - name: Generate changelog
        id: changelog
        uses: release-drafter/release-drafter@v5
        with:
          config: .github/release-drafter.yml
          previous_version: ${{ steps.get_version.outputs.prev_version }}
          next_version: ${{ steps.determine_version.outputs.new_version }}

      - name: Configure Git
        uses: actions/configure-git@v1
        with:
          user.name: builder555
          user.email: 85308587+builder555@users.noreply.github.com

      - name: Commit and push version file and changelog
        run: |
          git add version.txt CHANGELOG.md
          git commit -m "chore: release version ${{ steps.determine_version.outputs.new_version }}"
          git push origin master

      - name: Zip app folder
        run: |
          zip -r app.zip api

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_version.outputs.new_version }}
          release_name: Release ${{ steps.determine_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload asset
        id: upload_asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app.zip
          asset_name: app.zip
          asset_content_type: application/zip
